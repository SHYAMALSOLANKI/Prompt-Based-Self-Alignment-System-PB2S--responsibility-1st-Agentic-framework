name: PB2S Spec SOT + Conformance (v0.2.1.1)

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "23 2 * * *"   # nightly drift check

concurrency:
  group: pb2s-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  # Optional hint to the spec location; can be empty.
  SPEC_PATH: SPEC-2_Total_Attention_EdgeAI_v0.2.1.1_RELEASE.md
  PB2S_ENDPOINT: ${{ secrets.PB2S_ENDPOINT }}

jobs:
  conformance:
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install paho-mqtt orjson jsonschema

      # ---- Source-of-Truth check (spec sections + proof schema) ----
      - name: Verify Spec SOT (auto-find)
        shell: bash
        run: |
          set -e
          # 1) Resolve spec path
          CANDIDATES=(
            "$SPEC_PATH"
            "SPECIFICATION/pb2s_v0.2.1_spec.md"
            "SPECIFICATION/pb2s_v0.2.1_spec_mandate.md"
            "SPECIFICATION/pb2s_multi_model_brain_v0.2.1_spec.md"
            "Spec_1_Total_attention_edge_ai_Brain.md"
            "SPEC-2_Total_Attention_EdgeAI_v0.2.1.1_RELEASE.md"
          )
          SPEC=""
          for c in "${CANDIDATES[@]}"; do
            if [ -n "$c" ] && [ -f "$c" ]; then SPEC="$c"; break; fi
          done
          if [ -z "$SPEC" ]; then
            echo "::error ::No spec file found. Commit one or set env.SPEC_PATH."
            exit 1
          fi
          echo "Using spec: $SPEC"

          # 2) Ensure schema/checker exist; warn & skip if not
          if [ ! -f schemas/pb2s_proof.v2.schema.json ]; then
            echo "::warning ::schemas/pb2s_proof.v2.schema.json missing; skipping SOT check."
            exit 0
          fi
          if [ ! -f scripts/sot_verify.py ]; then
            echo "::warning ::scripts/sot_verify.py missing; skipping SOT check."
            exit 0
          fi

          # 3) Run the SOT checker
          python scripts/sot_verify.py \
            --spec "$SPEC" \
            --sections 2..10 \
            --schema schemas/pb2s_proof.v2.schema.json \
            --commit "${GITHUB_SHA}"

      # ---- Try to start a local server (optional). If you host one, set PB2S_ENDPOINT secret. ----
      - name: Start local PB2S planner (best-effort)
        shell: bash
        run: |
          set +e
          if [ -f main.py ]; then
            nohup python main.py >/tmp/pb2s_server.log 2>&1 &
          elif [ -f server.py ]; then
            nohup python server.py >/tmp/pb2s_server.log 2>&1 &
          fi
          for i in $(seq 1 45); do
            curl -fsS http://127.0.0.1:8000/openapi.json >/dev/null && break
            sleep 1
          done
          # do not fail this step if the server didn't come up
          exit 0

      - name: PB2S core conformance (structure + proof v2)
        shell: bash
        run: |
          EP="${PB2S_ENDPOINT:-http://127.0.0.1:8000/chat}"
          echo "Endpoint: $EP"
          python scripts/conformance.py --endpoint "$EP"

      # ---- Bus / bridge acceptance tests (AT-1..AT-7) ----
      - name: Install Mosquitto broker
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto mosquitto-clients
          sudo systemctl start mosquitto

      - name: AT-1 Symbols-only ingress
        shell: bash
        run: python scripts/at_bus.py --case symbols_only

      - name: AT-2 Dead-man stop (hb window)
        shell: bash
        run: python scripts/at_bus.py --case deadman

      - name: AT-3 Determinism (temp ≤ 0.2; fixed seed)
        shell: bash
        run: |
          EP="${PB2S_ENDPOINT:-http://127.0.0.1:8000/chat}"
          python scripts/at_determinism.py --endpoint "$EP" --runs 10

      - name: AT-4 CLARIFY path (two questions)
        shell: bash
        run: |
          EP="${PB2S_ENDPOINT:-http://127.0.0.1:8000/chat}"
          python scripts/at_clarify.py --endpoint "$EP"

      - name: AT-5 Proof→Action integrity
        shell: bash
        run: python scripts/at_proof_to_action.py

      - name: AT-6 Keep-alive under TOTAL
        shell: bash
        run: python scripts/at_bus.py --case keepalive

      - name: AT-7 Retention hashing policy present
        shell: bash
        run: python scripts/at_retention.py --policy configs/retention.yaml

      # ---- Evidence bundle ----
      - name: Write evidence manifest
  shell: bash
  run: |
    mkdir -p docs/challenges
    python - <<'PY'
import json, os, pathlib

path = pathlib.Path('docs/challenges/evidence_manifest.json')
path.parent.mkdir(parents=True, exist_ok=True)

data = {
  "spec": "pb2s_v0.2.1.1_release",
  "commit": os.environ.get("GITHUB_SHA", ""),
  "endpoint": os.environ.get("PB2S_ENDPOINT", "local"),
  "passed": ["core","AT-1","AT-2","AT-3","AT-4","AT-5","AT-6","AT-7"]
}

path.write_text(json.dumps(data, indent=2))
print(f"Wrote {path}")
PY

      - name: Upload evidence artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: pb2s_evidence_${{ github.run_id }}
          path: |
            docs/challenges/evidence_manifest.json
            /tmp/pb2s_server.log
            logs
            proofs
